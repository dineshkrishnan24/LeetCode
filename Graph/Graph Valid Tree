Givennnodes labeled from0ton - 1and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.
For example:
Givenn = 5andedges = [[0, 1], [0, 2], [0, 3], [1, 4]], returntrue.
Givenn = 5andedges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], returnfalse.
Note: you can assume that no duplicate edges will appear inedges. Since all edges are undirected,[0, 1]is the same as[1, 0]and thus will not appear together inedges.



Solution : DFS

Time Complexity: O(N)
Space Complexity: O(N)


import java.util.* ;
import java.io.*; 
public class Solution {

    public static Boolean checkGraph(int[][] edges, int n, int m) {
       List<Set<Integer>> adjList = new ArrayList<>();
       for(int i=0;i<n;i++) {
           adjList.add(new HashSet<>());
       }
       for(int[] edge: edges) {
           adjList.get(edge[0]).add(edge[1]);
           adjList.get(edge[1]).add(edge[0]);
       }
       boolean[] visit = new boolean[n];
        if(hasCycle(0, visit, adjList, -1)) {
               return false;
        }
        for(int i=0;i<n;i++) {
            if(!visit[i]) {
                return false;
            }
        }
       
       return true;
    }

    public static boolean hasCycle(int node, boolean[] visit
                ,List<Set<Integer>> adjList, int parent ) {
        visit[node] = true;
        for(Integer each: adjList.get(node)) {
            if((visit[each] && each!=parent) || 
                    (visit[each]==false && hasCycle(each, visit, adjList, node))) {
                        return true;
                    }
        }
        return false;
    }
}


Solution 2: BFS

Time Complexity: O(N)
Space Complexity: O(N)

import java.util.* ;
import java.io.*; 
public class Solution {

    public static Boolean checkGraph(int[][] edges, int n, int m) {
       List<Set<Integer>> adjList = new ArrayList<>();
       for(int i=0;i<n;i++) {
           adjList.add(new HashSet<>());
       }
       for(int[] edge: edges) {
           adjList.get(edge[0]).add(edge[1]);
           adjList.get(edge[1]).add(edge[0]);
       }
       boolean[] visit = new boolean[n];
       Queue<Integer> queue = new LinkedList<>();
       queue.add(0);
       while(!queue.isEmpty()) {
           int val = queue.remove();
           if(visit[val]) {
               return false;
           }
           visit[val] = true;
           for(Integer each: adjList.get(val)) {
               queue.add(each);
               adjList.get(each).remove(val);
           }
       }
       for(int i=0;i<n;i++) {
           if(!visit[i])
                return false;
       }
       
       return true;
    }

}