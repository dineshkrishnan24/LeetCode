Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

 

Example 1:


Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.
Example 2:

Input: board = [["X"]]
Output: [["X"]]
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is 'X' or 'O'.



Solution: Flood Fill using DFS

Time Complexity: O(N*M)
Space Complexity: O(1)


class Solution {
    public void solve(char[][] board) {
        int n = board.length;
        for(int i=0;i<n;i++) {
            for(int j=0;j<board[i].length;j++) {
                if(board[i][j] == 'O')
                    board[i][j] = '-';
            }
        }
        while(true) {
            int posArr[] = isBorderRegionPresent(board);
            if(posArr.length == 2) {
                updateRegion(board, posArr);
            } else {
                break;
            }
        }
        for(int i=0;i<n;i++) {
            for(int j=0;j<board[i].length;j++) {
                if(board[i][j] == '-')
                    board[i][j] = 'X';
            }
        }
    }
    
    public int[] isBorderRegionPresent(char[][] board) {
        int n = board.length;
        for(int i=0;i<board[0].length;i++) {
            if(board[0][i] == '-') {
                return new int[]{0,i};
            }
        }
        for(int i=0;i<board[n-1].length;i++) {
            if(board[n-1][i] == '-') {
                return new int[]{n-1, i};
            }
        }
        for(int i=0;i<n;i++) {
            if(board[i][0] == '-') {
                return new int[]{i, 0};
            }
        }
        for(int i=0;i<n;i++) {
            int m = board[i].length;
            if(board[i][m-1] == '-') {
                return new int[]{i, m-1};
            }
        }
        return new int[0];
    }
    
    public void updateRegion(char[][] board, int[] posArr) {
        int r = posArr[0];
        int c = posArr[1];
        if(r<0 || c<0 || r >= board.length || c >= board[r].length || board[r][c] != '-') {
            return;
        }
        board[r][c] = 'O';
        updateRegion(board, new int[]{r-1, c});
        updateRegion(board, new int[]{r+1, c});
        updateRegion(board, new int[]{r, c-1});
        updateRegion(board, new int[]{r, c+1});
    }
}