Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

 

Example 1:


Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]
Example 2:


Input: board = [["a","b"],["c","d"]], words = ["abcb"]
Output: []
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 12
board[i][j] is a lowercase English letter.
1 <= words.length <= 3 * 104
1 <= words[i].length <= 10
words[i] consists of lowercase English letters.
All the strings of words are unique.




Solution: Tries

Time Complexity: O(N * M * max(∣words[i]∣))
Spave Complexity: O(Σ∣words[i]∣)

class TrieNode {
        TrieNode[] children = new TrieNode[26];
        String word;
    }
    
class Solution {
    

    TrieNode root = new TrieNode();

    public List<String> findWords(char[][] board, String[] words) {
        formTries(words);
        int n = board.length, m = board[0].length;
        List<String> list = new ArrayList<>();
        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                TrieNode temp = root;
                search(board, root, i, j, list);
            }
        }
        return list;
    }

    public void formTries(String[] words) {
        for(String word: words) {
            TrieNode temp = root;
            int len = word.length();
            for(int i=0;i<len;i++) {
                int ind = word.charAt(i) - 'a';
                if(temp.children[ind] == null) {
                    temp.children[ind] = new TrieNode();
                }
                temp = temp.children[ind];
            } 
            temp.word = word;
        }
    }

    public void search(char[][] board, TrieNode root, int i, int j, List<String> list) {
        if(i<0 || j<0 || i >= board.length || j>=board[0].length || board[i][j] == '*') {
            return;
        }
        // System.out.println(i+" - "+j+ " = "+board[i][j]+ " = "+root.word);
        char c = board[i][j];
        TrieNode temp = root.children[c-'a'];
        if(temp == null) {
            return;
        }
        if(temp.word != null) {
            list.add(temp.word);
            temp.word = null;
        }
        board[i][j] = '*';
        search(board, temp, i-1, j, list);
        search(board, temp, i+1, j, list);
        search(board, temp, i, j-1, list);
        search(board, temp, i, j+1, list);
        board[i][j] = c;
    }
}