Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.

 

Example 1:


Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].
Example 2:

Input: root = [1,2]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-100 <= Node.val <= 100


Solution: DFS

Time Complexity: O(N)
Space Complexity:  O(1)

class Solution {
    static class A {
    int ans = Integer.MIN_VALUE;
}
    public int diameterOfBinaryTree(TreeNode root) {
        A a = new A();
        diameterOfBinaryTree(root, a);
        return a.ans-1;
    }

    public int diameterOfBinaryTree(TreeNode root, A a) {
        if(root == null) {
            return 0;
        }
        int leftValue = diameterOfBinaryTree(root.left, a);
        int rightValue = diameterOfBinaryTree(root.right, a);
        a.ans = Math.max(a.ans, leftValue+rightValue+1);
        return Math.max(leftValue, rightValue)+1;
    }
}