Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.

 

Example 1:


Input: mat = [[0,0,0],[0,1,0],[0,0,0]]
Output: [[0,0,0],[0,1,0],[0,0,0]]
Example 2:


Input: mat = [[0,0,0],[0,1,0],[1,1,1]]
Output: [[0,0,0],[0,1,0],[1,2,1]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 104
1 <= m * n <= 104
mat[i][j] is either 0 or 1.
There is at least one 0 in mat.



Solution: BFS 

Time Complexity: O(N*M)
Space Complexity: O(N*M)


class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;
        int[][] finalMat = new int[n][m];
        int[][] visited = new int[n][m];
        Queue<int[]> queue = new LinkedList<int[]>();
        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                if(mat[i][j]==0) {
                    queue.add(new int[]{i,j,0});
                    visited[i][j] = 1;
                }
            }
        }
        while(!queue.isEmpty()) {
            int[] arr = queue.remove();
            int r = arr[0], c = arr[1], val = arr[2];
            finalMat[r][c] = val;
            if(r-1 >=0 && visited[r-1][c] == 0) {
                queue.add(new int[]{r-1,c,val+1});
                visited[r-1][c] = 1;
            }
            if(r+1 < n && visited[r+1][c] == 0) {
                queue.add(new int[]{r+1,c,val+1});
                visited[r+1][c] = 1;
            }
            if(c-1 >=0 && visited[r][c-1] == 0) {
                queue.add(new int[]{r,c-1,val+1});
                visited[r][c-1] = 1;
            }
            if(c+1 < m && visited[r][c+1] == 0) {
                queue.add(new int[]{r,c+1,val+1});
                visited[r][c+1] = 1;
            }
        }
        return finalMat;
    }   
}



Solution: DP

class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int m = mat.length;
        int n = mat[0].length;
        int[][] dp = new int[m][n];
        
        for (int row = 0; row < m; row++) {
            for (int col = 0; col < n; col++) {
                dp[row][col] = mat[row][col];
            }
        } 

        for (int row = 0; row < m; row++) {
            for (int col = 0; col < n; col++) {
                if (dp[row][col] == 0) {
                    continue;
                }

                int minNeighbor = m * n;
                if (row > 0) {
                    minNeighbor = Math.min(minNeighbor, dp[row - 1][col]);
                }
                
                if (col > 0) {
                    minNeighbor = Math.min(minNeighbor, dp[row][col - 1]);
                }
                
                dp[row][col] = minNeighbor + 1;
            }
        }
        
        for (int row = m - 1; row >= 0; row--) {
            for (int col = n - 1; col >= 0; col--) {
                if (dp[row][col] == 0) {
                    continue;
                }
                
                int minNeighbor = m * n;
                if (row < m - 1) {
                    minNeighbor = Math.min(minNeighbor, dp[row + 1][col]);
                }
                
                if (col < n - 1) {
                    minNeighbor = Math.min(minNeighbor, dp[row][col + 1]);
                }
                
                dp[row][col] = Math.min(dp[row][col], minNeighbor + 1);
            }
        }
        
        return dp;
    }
}

