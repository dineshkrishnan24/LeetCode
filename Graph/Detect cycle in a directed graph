Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.


Example 1:

Input:



Output: 1
Explanation: 3 -> 3 is a cycle

Example 2:

Input:


Output: 0
Explanation: no cycle in the graph

Your task:
You dont need to read input or print anything. Your task is to complete the function isCyclic() which takes the integer V denoting the number of vertices and adjacency list adj as input parameters and returns a boolean value denoting if the given directed graph contains a cycle or not.
In the adjacency list adj, element adj[i][j] represents an edge from i to j.


Expected Time Complexity: O(V + E)
Expected Auxiliary Space: O(V)


Constraints:
1 ≤ V, E ≤ 105


Solution: DFS

Time Complexity: O(V+E)
Space Complexity: O(E)


class Solution {
    // Function to detect cycle in a directed graph.
    public int[] parents;
    
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        boolean[] recArr = new boolean[V];
        for(int i=0;i<V;i++) {
            if(hasCycle(i, adj, recArr, visited)) {
                return true;
            }
        }
        return false;
    }
    
    public boolean hasCycle(int node, ArrayList<ArrayList<Integer>> adj, 
            boolean[] recArr, boolean[] visited) {
        if(recArr[node])
            return true;
        if(visited[node])
            return false;
        recArr[node] = true;
        visited[node] = true;
        for(Integer each: adj.get(node)) {
            if(hasCycle(each, adj, recArr, visited)) {
                return true;
            }
        }
        recArr[node] = false;
        return false;
    }
}