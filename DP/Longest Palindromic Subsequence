Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".
Example 2:

Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb".
 

Constraints:

1 <= s.length <= 1000
s consists only of lowercase English letters.


Solution: Recurrusion

Time Complexity: O(2^N)
Space Complexity: O(N)

class Solution {
    public int longestPalindromeSubseq(String s) {
       return getCountOfSubSeq(s, "", 0, s.length());
    }

    public int getCountOfSubSeq(String s, String temp, int ind, int n) {
        if(ind == n) {
            if(isPalindrome(temp)) {
                return temp.length();
            }
            return 0;
        }
        temp += s.charAt(ind)+"";
        int l = getCountOfSubSeq(s, temp, ind+1,n);
        temp = temp.substring(0,temp.length()-1);
        int r = getCountOfSubSeq(s, temp, ind+1,n);
        return Math.max(l,r);
    }

    public boolean isPalindrome(String s) {
        int n = s.length();
        int l=0,r=n-1;
        for(int i=0;i<n/2;i++) {
            if(s.charAt(l) != s.charAt(r)) {
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
}



Solution: Memoization (Top Down approach)

Time Complexity: O(N*N)
Space Complexity: O(N*N)+ O(N)


class Solution {
    public int longestPalindromeSubseq(String s) {
        String revStr = new StringBuilder(s).reverse().toString();
        int n = s.length();
        int[][] dp = new int[n+1][n+1];
        for(int i=0;i<=n;i++) {
            for(int j=0;j<=n;j++) {
                dp[i][j] = -1;
            }
        }
        return getCountOfCommonSubSeq(s, revStr, n-1, n-1, dp);
    }

    public int getCountOfCommonSubSeq(String s1, String s2, int i, int j, int[][] dp) {
        if(i<0 || j<0) {
            return 0;
        }
        if(dp[i][j]!=-1) {
            return dp[i][j];
        }
        if(s1.charAt(i) == s2.charAt(j)) {
            dp[i][j] = 1 + getCountOfCommonSubSeq(s1, s2, i-1, j-1, dp);
        } else {
            dp[i][j] = 0 + Math.max(getCountOfCommonSubSeq(s1, s2, i-1, j, dp), 
                                    getCountOfCommonSubSeq(s1, s2, i, j-1, dp));
        }
        return dp[i][j];
    }
}


Solution: Tabulation (Bottom Up approach)

Time Complexity: O(N*N)
Space Complexity: O(N*N)

class Solution {
    public int longestPalindromeSubseq(String s) {
        String revStr = new StringBuilder(s).reverse().toString();
        return getCountOfCommonSubSeq(s, revStr);
    }

    public int getCountOfCommonSubSeq(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();
        int[][] dp = new int[n+1][n+1];
        for(int i=1;i<=n;i++) {
            for(int j=1;j<=n;j++) {
                dp[i][j] = -1;
            }
        }
        for(int i=1;i<=n;i++) {
            for(int j=1;j<=m;j++) {
                if(s1.charAt(i-1) == s2.charAt(j-1)) {
                    dp[i][j] = 1 + dp[i-1][j-1];
                } else {
                    dp[i][j] = 0 + Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }
}