You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.

 

Example 1:

Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167
Example 2:

Input: nums = [1,5]
Output: 10
 

Constraints:

n == nums.length
1 <= n <= 300
0 <= nums[i] <= 100



Solution: DP Using Memoization

Time Complexity: O(N^3)
Space Complexity: O(N^2)+O(N)


class Solution {
    public int maxCoins(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n+1][n+1];
        for(int[] arr: dp) {
            Arrays.fill(arr, -1);
        }
        int[] arr = new int[n+2];
        arr[0] = 1;
        for(int i=0;i<n;i++) {
            arr[i+1] = nums[i];
        }
        arr[n+1] = 1;
        return getMaxCoins(1, n, arr, dp);
    }
    
    int getMaxCoins(int i,int j, int[] nums, int[][] dp) {
        if(i>j) {
            return 0;
        }
        if(dp[i][j] != -1) {
            return dp[i][j];
        }
        int max = Integer.MIN_VALUE;
        for(int ind = i;ind<=j;ind++) {
            int cost = (nums[i-1] * nums[ind] * nums[j+1])
                        + getMaxCoins(i, ind-1, nums, dp)
                        + getMaxCoins(ind+1, j, nums, dp);
            max = Math.max(max, cost);
        }
        return dp[i][j] = max;
    }
}