Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
 

Constraints:

1 <= s.length <= 20
1 <= p.length <= 20
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.
It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.



Solution: DP with Memoization

Time Complexity: O(N*M)
Space Complexity: O(N*M)+O(N+M)

class Solution {
    public boolean isMatch(String s, String p) {
       int n = s.length();
       int m = p.length();
       int[][] dp = new int[n][m];
       for(int[] arr: dp) {
           Arrays.fill(arr, -1);
       }
       
       return isMatch(s, p, n-1, m-1, dp) == 1 ? true : false;
    }
    
    private int isMatch(String s, String p, int n, int m, int[][] dp) {
        if(n<0 && m < 0) {
            return 1;
        }
        if(n>=0 && m < 0) {
            return 0;
        }
        if(n < 0 && m >= 0) {
            return 1;
        }
        if(dp[n][m] != -1) {
            return dp[n][m];
        }
        if(s.charAt(n) == p.charAt(m) || p.charAt(m) == '.') {
            return dp[n][m] = isMatch(s, p, n-1, m-1, dp);
        } else {
            if(p.charAt(m) == '*') {
                return dp[n][m] = (isMatch(s, p, n-1, m, dp) == 1 || isMatch(s, p, n, m-1, dp) == 1) ? 1 : 0;
            }
            return dp[n][m] = 0;
        }
    }

    public int isAllStars(String s, int j) {
        for(int i=0;i<=j;i++) {
            if(s.charAt(i)!='*') {
                return 0;
            }
        }
        return 1;
    }
}



Solution: Dp Using Tabulation (Bottom Up)

Time Complexity: O(N*M)
Space Complexity: O(N*M)

class Solution {
    public boolean isMatch(String s, String p) {
        
       int n = s.length();
       int m = p.length();
       boolean[][] dp = new boolean[n+1][m+1];
       dp[0][0] = true;
       for (int j = 1; j <= m; j++) {
            if (p.charAt(j-1) == '*')
                dp[0][j] = dp[0][j-2];
        }
       for(int i=1;i<=n;i++) {
           for(int j=1;j<=m;j++) {
                if(s.charAt(i-1) == p.charAt(j-1) || p.charAt(j-1) == '.') {
                    dp[i][j] = dp[i-1][j-1];
                } else if(p.charAt(j-1) == '*') {
                    dp[i][j] = dp[i][j-2];
                    if (s.charAt(i-1) == p.charAt(j-2) || p.charAt(j-2) == '.') {
                        dp[i][j] = dp[i][j] || dp[i-1][j];
                    }
                }
           }
       }
       return dp[n][m];
    }
}