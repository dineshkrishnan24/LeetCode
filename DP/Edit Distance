Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.


Solution: DP (Using memozation Top down approach)

Time Complexity: O(N*M)
Space Complexity: O(N*M) + O(N+M)

class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        int dp[][] = new int[n][m];
        for(int[] arr: dp) {
            Arrays.fill(arr,-1);
        }
        return editDistance(word1, word2,n-1,m-1, dp);
    }

    int editDistance(String s1, String s2, int i, int j, int[][] dp) {
        if(i<0)
            return j+1;
        if(j<0)
            return i+1;
        if(dp[i][j]!=-1) 
            return dp[i][j];
        if(s1.charAt(i) == s2.charAt(j)) {
            return dp[i][j] = 0 + editDistance(s1, s2, i-1, j-1, dp);
        } else {
            return dp[i][j] = 1 + Math.min(editDistance(s1, s2, i-1, j-1, dp), Math.min(editDistance(s1, s2, i-1, j, dp), editDistance(s1, s2, i, j-1, dp)));
        }
    }
}



Solution: DP (Using tabulation Bottom Up approach)

Time Complexity: O(N*M)
Space Complexity: O(N*M)

class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        int dp[][] = new int[n+1][m+1];
        for(int i=0;i<=n;i++) {
            dp[i][0] = i;
        }
        for(int i=0;i<=m;i++) {
            dp[0][i] = i;
        }
        for(int i=1;i<=n;i++) {
            for(int j=1;j<=m;j++) {
                if(word1.charAt(i-1) == word2.charAt(j-1)) {
                    dp[i][j] = 0 + dp[i-1][j-1];
                } else {
                    dp[i][j] = 1+ Math.min(dp[i-1][j-1], Math.min(dp[i-1][j], dp[i][j-1]));
                }
            }
        }
        return dp[n][m];
    }
}