Given an integer array nums, return the length of the longest strictly increasing 
subsequence
.

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1
 

Constraints:

1 <= nums.length <= 2500
-104 <= nums[i] <= 104
 

Solution: DP 

Time Complexity: O(N*N)
Space Complexity: O(N*N) + O(N)



class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n][n+1];
        for(int i=0;i<n;i++) {
            for(int j=0;j<n+1;j++) {
                dp[i][j] = -1;
            }
        }
        return updateTable(nums, dp, n, 0, -1);
    }

    public int updateTable(int[] nums, int[][] dp, int n, int ind, int prevInd) {
        if(n == ind) {
            return 0;
        }
        if(dp[ind][prevInd+1]!=-1) {
            return dp[ind][prevInd+1];
        }
        int notTake = 0 + updateTable(nums, dp, n, ind+1, prevInd);
        int take = 0;
        if(prevInd==-1 || nums[ind]>nums[prevInd]) {
            take = 1 + updateTable(nums, dp, n, ind+1, ind);
        }
        return dp[ind][prevInd+1] = Math.max(take, notTake);
    }
}