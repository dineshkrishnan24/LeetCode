Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.





Solution: Memoization (Top Down approach)

Time Complexity: O(N*M)
Space Complexity: O(N*M) + O(N+M)


class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] dp = new int[n+1][m+1];
        for(int i=0;i<=n;i++) {
            for(int j=0;j<=m;j++) {
                dp[i][j] = -1;
            }
        }
        return updateTable(text1, text2, n-1, m-1, dp);
    }

    int updateTable(String text1, String text2, int n, int m, int[][] dp) {
        if(n < 0 || m < 0) {
            return 0;
        }
        if(dp[n][m] != -1) {
            return dp[n][m];
        }
        if(text1.charAt(n) == text2.charAt(m)) {
            return dp[n][m] = 1 + updateTable(text1, text2, n-1, m-1, dp);
        } else {
            return dp[n][m] = 0 + Math.max(updateTable(text1, text2, n-1, m, dp), 
                                            updateTable(text1, text2, n, m-1, dp));
        }
    }
}


Solution: Tabulation (Bottom Up approach)

Time Complexity: O(N*M)
Space Complexity: O(N*M)

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] dp = new int[n+1][m+1];
        for(int i=1;i<=n;i++) {
            for(int j=1;j<=m;j++) {
                dp[i][j] = -1;
            }
        }
        for(int i=1;i<=n;i++) {
            for(int j=1;j<=m;j++) {
                if(text1.charAt(i-1)==text2.charAt(j-1)) {
                    dp[i][j] = 1 + dp[i-1][j-1];
                } else {
                    dp[i][j] = 0 + Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[n][m];        
    }
}


Solution: DP (Space Optimization) 

Time Complexity: O(N*M)
Space Complexity: O(M)


class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[] row1 = new int[m+1];
        int[] row2 = new int[m+1];    
        for(int i=1;i<=n;i++) {
            for(int j=1;j<=m;j++) {
                if(text1.charAt(i-1)==text2.charAt(j-1)) {
                    row2[j] = 1 + row1[j-1];
                } else {
                    row2[j] = 0 + Math.max(row1[j], row2[j-1]);
                }
            }
            row1=(int[])(row2.clone());
        }
        return row2[m];
    }
}