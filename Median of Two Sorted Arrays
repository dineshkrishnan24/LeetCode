Link: https://leetcode.com/problems/median-of-two-sorted-arrays/

Question: 
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

class Solution {

    // solution 1
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length, m = nums2.length;
        int[] arr = new int[n+m];
        if(nums1.length == 0)
            arr = nums2;
        else if(nums2.length == 0)
            arr = nums1;
        else {
            int l = 0, r = 0;
            int i;
            for(i=0;l<n && r<m;i++) {
                if(nums1[l]<nums2[r]) {
                    arr[i]=nums1[l];
                    l++;
                } else {
                    arr[i]=nums2[r];
                    r++;
                }
            }
            
            if(l<n) {
                for(;l<n;i++) {
                    arr[i] = nums1[l++];
                }
            }
            if(r<m) {
                for(;r<m;i++) {
                    arr[i] = nums2[r++];
                }
            }
        }
        if((m+n)%2==0)
            return (double)(arr[(m+n)/2]+arr[((m+n)/2)-1])/2;
        else
            return arr[(m+n)/2];
    }

    // solution 2`
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length>nums2.length)
            return findMedianSortedArrays(nums2, nums1);
        int x=nums1.length;
        int y=nums2.length;
        int low = 0;
        int high = x;
        while(low<=high) {
            int partX = (low+high)/2;
            int partY = ((x+y)/2) - partX;
            int l1 = partX==0 ? Integer.MIN_VALUE : nums1[partX-1];
            int l2 = partY==0 ? Integer.MIN_VALUE : nums2[partY-1];
            int r1 = partX==x ? Integer.MAX_VALUE : nums1[partX];
            int r2 = partY==y ? Integer.MAX_VALUE : nums2[partY];
            if(l1<=r2 && l2<=r1) {
                if((x+y)%2==0)
                    return (float)(Math.max(l1,l2)+Math.min(r1,r2))/2;
                else 
                    return Math.min(r1,r2);
            } else if(l1>r2) {
                high = partX-1;
            } else {
                low = partX+1;
            }
        }
        return 0;

    }
    
}