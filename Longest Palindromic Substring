Given a string s, return the longest 
palindromic
 
substring
 in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.





Solution: 

Time Complexity: O(N2)
Space Complexity: O(1)


class Solution {
    
    public String longestPalindrome(String s) {
      int n = s.length();
      for(int i=n;i>0;i--) {
          for(int j=0;(i+j)<=n;j++) {
              if(isPalindrome(s.substring(j, j+i))) {
                  return s.substring(j, j+i);
              }
          }
      }
      return s.charAt(0)+"";
    }

    public boolean isPalindrome(String s) {
        int l=0, r=s.length()-1;
        while(l<r) {
            if(s.charAt(l)!=s.charAt(r)) {
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
    
      
}


Solution: DP

Time Complexity: O(N*N)
Space Complexity: O(N*N)

class Solution {
    
    public String longestPalindrome(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        int max = 1;
        int start = 0;
        for(int i=0;i<n;i++) {
            dp[i][i] = true;
        }
        for(int i=0;i<n-1;i++) {
            if(s.charAt(i) == s.charAt(i+1)) {
                dp[i][i+1] = true;
                start = i;
                max = 2;
            }
        }
        for(int k=3;k<=n;k++) {
            for(int i=0;i<n-k+1;i++) {
                int j = i+k-1;
                if(s.charAt(i) == s.charAt(j) && dp[i+1][j-1]) {
                    dp[i][j] = true;
                    if(max < k) {
                        start = i;
                        max = Math.max(max, k);
                    }

                }
            }
        }
        return s.substring(start,start+max);
    }
    
      
}